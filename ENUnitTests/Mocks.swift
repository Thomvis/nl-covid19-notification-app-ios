///
/// @Generated by Mockolo
///



import Combine
import Foundation
import UIKit
import WebKit
@testable import EN


class MainBuildableMock: MainBuildable {
    init() { }


    var buildCallCount = 0
    var buildHandler: (() -> (Routing))?
    func build() -> Routing {
        buildCallCount += 1
        if let buildHandler = buildHandler {
            return buildHandler()
        }
        return RoutingMock()
    }
}

class AppEntryPointMock: AppEntryPoint {
    init() { }
    init(uiviewController: UIViewController = UIViewController()) {
        self.uiviewController = uiviewController
    }


    var uiviewControllerSetCallCount = 0
    var uiviewController: UIViewController = UIViewController() { didSet { uiviewControllerSetCallCount += 1 } }

    var startCallCount = 0
    var startHandler: (() -> ())?
    func start()  {
        startCallCount += 1
        if let startHandler = startHandler {
            startHandler()
        }
        
    }
}

class InfectedInfoRoutingMock: InfectedInfoRouting {
    init() { }
    init(viewControllable: ViewControllable = ViewControllableMock()) {
        self.viewControllable = viewControllable
    }


    var viewControllableSetCallCount = 0
    var viewControllable: ViewControllable = ViewControllableMock() { didSet { viewControllableSetCallCount += 1 } }
}

class InfectedInfoViewControllableMock: InfectedInfoViewControllable {
    init() { }
    init(router: InfectedInfoRouting? = nil, uiviewController: UIViewController = UIViewController()) {
        self.router = router
        self.uiviewController = uiviewController
    }


    var routerSetCallCount = 0
    var router: InfectedInfoRouting? = nil { didSet { routerSetCallCount += 1 } }

    var presentCallCount = 0
    var presentHandler: ((ViewControllable, Bool, (() -> ())?) -> ())?
    func present(viewController: ViewControllable, animated: Bool, completion: (() -> ())?)  {
        presentCallCount += 1
        if let presentHandler = presentHandler {
            presentHandler(viewController, animated, completion)
        }
        
    }

    var uiviewControllerSetCallCount = 0
    var uiviewController: UIViewController = UIViewController() { didSet { uiviewControllerSetCallCount += 1 } }

    var dismissCallCount = 0
    var dismissHandler: ((ViewControllable, Bool, (() -> ())?) -> ())?
    func dismiss(viewController: ViewControllable, animated: Bool, completion: (() -> ())?)  {
        dismissCallCount += 1
        if let dismissHandler = dismissHandler {
            dismissHandler(viewController, animated, completion)
        }
        
    }
}

class InfectedRoutingMock: InfectedRouting {
    init() { }
    init(viewControllable: ViewControllable = ViewControllableMock()) {
        self.viewControllable = viewControllable
    }


    var viewControllableSetCallCount = 0
    var viewControllable: ViewControllable = ViewControllableMock() { didSet { viewControllableSetCallCount += 1 } }
}

class InfectedViewControllableMock: InfectedViewControllable {
    init() { }
    init(router: InfectedRouting? = nil, uiviewController: UIViewController = UIViewController()) {
        self.router = router
        self.uiviewController = uiviewController
    }


    var routerSetCallCount = 0
    var router: InfectedRouting? = nil { didSet { routerSetCallCount += 1 } }

    var presentCallCount = 0
    var presentHandler: ((ViewControllable, Bool, (() -> ())?) -> ())?
    func present(viewController: ViewControllable, animated: Bool, completion: (() -> ())?)  {
        presentCallCount += 1
        if let presentHandler = presentHandler {
            presentHandler(viewController, animated, completion)
        }
        
    }

    var uiviewControllerSetCallCount = 0
    var uiviewController: UIViewController = UIViewController() { didSet { uiviewControllerSetCallCount += 1 } }

    var dismissCallCount = 0
    var dismissHandler: ((ViewControllable, Bool, (() -> ())?) -> ())?
    func dismiss(viewController: ViewControllable, animated: Bool, completion: (() -> ())?)  {
        dismissCallCount += 1
        if let dismissHandler = dismissHandler {
            dismissHandler(viewController, animated, completion)
        }
        
    }
}

class MainRoutingMock: MainRouting {
    init() { }
    init(viewControllable: ViewControllable = ViewControllableMock()) {
        self.viewControllable = viewControllable
    }


    var attachStatusCallCount = 0
    var attachStatusHandler: (() -> ())?
    func attachStatus()  {
        attachStatusCallCount += 1
        if let attachStatusHandler = attachStatusHandler {
            attachStatusHandler()
        }
        
    }

    var viewControllableSetCallCount = 0
    var viewControllable: ViewControllable = ViewControllableMock() { didSet { viewControllableSetCallCount += 1 } }

    var attachMoreInformationCallCount = 0
    var attachMoreInformationHandler: (() -> ())?
    func attachMoreInformation()  {
        attachMoreInformationCallCount += 1
        if let attachMoreInformationHandler = attachMoreInformationHandler {
            attachMoreInformationHandler()
        }
        
    }

    var routeToAboutAppCallCount = 0
    var routeToAboutAppHandler: (() -> ())?
    func routeToAboutApp()  {
        routeToAboutAppCallCount += 1
        if let routeToAboutAppHandler = routeToAboutAppHandler {
            routeToAboutAppHandler()
        }
        
    }

    var detachAboutAppCallCount = 0
    var detachAboutAppHandler: ((Bool) -> ())?
    func detachAboutApp(shouldHideViewController: Bool)  {
        detachAboutAppCallCount += 1
        if let detachAboutAppHandler = detachAboutAppHandler {
            detachAboutAppHandler(shouldHideViewController)
        }
        
    }

    var routeToReceivedNotificationCallCount = 0
    var routeToReceivedNotificationHandler: (() -> ())?
    func routeToReceivedNotification()  {
        routeToReceivedNotificationCallCount += 1
        if let routeToReceivedNotificationHandler = routeToReceivedNotificationHandler {
            routeToReceivedNotificationHandler()
        }
        
    }

    var routeToInfectedCallCount = 0
    var routeToInfectedHandler: (() -> ())?
    func routeToInfected()  {
        routeToInfectedCallCount += 1
        if let routeToInfectedHandler = routeToInfectedHandler {
            routeToInfectedHandler()
        }
        
    }

    var routeToRequestTestCallCount = 0
    var routeToRequestTestHandler: (() -> ())?
    func routeToRequestTest()  {
        routeToRequestTestCallCount += 1
        if let routeToRequestTestHandler = routeToRequestTestHandler {
            routeToRequestTestHandler()
        }
        
    }

    var routeToShareAppCallCount = 0
    var routeToShareAppHandler: (() -> ())?
    func routeToShareApp()  {
        routeToShareAppCallCount += 1
        if let routeToShareAppHandler = routeToShareAppHandler {
            routeToShareAppHandler()
        }
        
    }

    var routeToSettingsCallCount = 0
    var routeToSettingsHandler: (() -> ())?
    func routeToSettings()  {
        routeToSettingsCallCount += 1
        if let routeToSettingsHandler = routeToSettingsHandler {
            routeToSettingsHandler()
        }
        
    }
}

class MoreInformationTableListenerMock: MoreInformationTableListener {
    init() { }


    var didSelectCallCount = 0
    var didSelectHandler: ((MoreInformationCell, Int) -> ())?
    func didSelect(cell: MoreInformationCell, at index: Int)  {
        didSelectCallCount += 1
        if let didSelectHandler = didSelectHandler {
            didSelectHandler(cell, index)
        }
        
    }
}

class OnboardingConsentManagingMock: OnboardingConsentManaging {
    init() { }
    init(onboardingConsentSteps: [OnboardingConsentStep] = [OnboardingConsentStep]()) {
        self.onboardingConsentSteps = onboardingConsentSteps
    }


    var onboardingConsentStepsSetCallCount = 0
    var onboardingConsentSteps: [OnboardingConsentStep] = [OnboardingConsentStep]() { didSet { onboardingConsentStepsSetCallCount += 1 } }

    var getStepCallCount = 0
    var getStepHandler: ((Int) -> (OnboardingConsentStep?))?
    func getStep(_ index: Int) -> OnboardingConsentStep? {
        getStepCallCount += 1
        if let getStepHandler = getStepHandler {
            return getStepHandler(index)
        }
        return nil
    }

    var getNextConsentStepCallCount = 0
    var getNextConsentStepHandler: ((OnboardingConsentStepIndex) -> (OnboardingConsentStepIndex?))?
    func getNextConsentStep(_ currentStep: OnboardingConsentStepIndex) -> OnboardingConsentStepIndex? {
        getNextConsentStepCallCount += 1
        if let getNextConsentStepHandler = getNextConsentStepHandler {
            return getNextConsentStepHandler(currentStep)
        }
        return nil
    }

    var askEnableExposureNotificationsCallCount = 0
    var askEnableExposureNotificationsHandler: ((@escaping (() -> ())) -> ())?
    func askEnableExposureNotifications(_ completion: @escaping (() -> ()))  {
        askEnableExposureNotificationsCallCount += 1
        if let askEnableExposureNotificationsHandler = askEnableExposureNotificationsHandler {
            askEnableExposureNotificationsHandler(completion)
        }
        
    }

    var askEnableBluetoothCallCount = 0
    var askEnableBluetoothHandler: ((@escaping (() -> ())) -> ())?
    func askEnableBluetooth(_ completion: @escaping (() -> ()))  {
        askEnableBluetoothCallCount += 1
        if let askEnableBluetoothHandler = askEnableBluetoothHandler {
            askEnableBluetoothHandler(completion)
        }
        
    }
}

class OnboardingConsentViewControllableMock: OnboardingConsentViewControllable {
    init() { }
    init(uiviewController: UIViewController = UIViewController()) {
        self.uiviewController = uiviewController
    }


    var uiviewControllerSetCallCount = 0
    var uiviewController: UIViewController = UIViewController() { didSet { uiviewControllerSetCallCount += 1 } }
}

class OnboardingManagingMock: OnboardingManaging {
    init() { }
    init(onboardingSteps: [OnboardingStep] = [OnboardingStep]()) {
        self.onboardingSteps = onboardingSteps
    }


    var onboardingStepsSetCallCount = 0
    var onboardingSteps: [OnboardingStep] = [OnboardingStep]() { didSet { onboardingStepsSetCallCount += 1 } }

    var getStepCallCount = 0
    var getStepHandler: ((Int) -> (OnboardingStep?))?
    func getStep(_ index: Int) -> OnboardingStep? {
        getStepCallCount += 1
        if let getStepHandler = getStepHandler {
            return getStepHandler(index)
        }
        return nil
    }
}

class RequestTestRoutingMock: RequestTestRouting {
    init() { }
    init(viewControllable: ViewControllable = ViewControllableMock()) {
        self.viewControllable = viewControllable
    }


    var viewControllableSetCallCount = 0
    var viewControllable: ViewControllable = ViewControllableMock() { didSet { viewControllableSetCallCount += 1 } }
}

class RequestTestViewControllableMock: RequestTestViewControllable {
    init() { }
    init(router: RequestTestRouting? = nil, uiviewController: UIViewController = UIViewController()) {
        self.router = router
        self.uiviewController = uiviewController
    }


    var routerSetCallCount = 0
    var router: RequestTestRouting? = nil { didSet { routerSetCallCount += 1 } }

    var presentCallCount = 0
    var presentHandler: ((ViewControllable, Bool, (() -> ())?) -> ())?
    func present(viewController: ViewControllable, animated: Bool, completion: (() -> ())?)  {
        presentCallCount += 1
        if let presentHandler = presentHandler {
            presentHandler(viewController, animated, completion)
        }
        
    }

    var uiviewControllerSetCallCount = 0
    var uiviewController: UIViewController = UIViewController() { didSet { uiviewControllerSetCallCount += 1 } }

    var dismissCallCount = 0
    var dismissHandler: ((ViewControllable, Bool, (() -> ())?) -> ())?
    func dismiss(viewController: ViewControllable, animated: Bool, completion: (() -> ())?)  {
        dismissCallCount += 1
        if let dismissHandler = dismissHandler {
            dismissHandler(viewController, animated, completion)
        }
        
    }
}

class RootRoutingMock: RootRouting {
    init() { }
    init(viewControllable: ViewControllable = ViewControllableMock()) {
        self.viewControllable = viewControllable
    }


    var viewControllableSetCallCount = 0
    var viewControllable: ViewControllable = ViewControllableMock() { didSet { viewControllableSetCallCount += 1 } }

    var detachOnboardingAndRouteToMainCallCount = 0
    var detachOnboardingAndRouteToMainHandler: ((Bool) -> ())?
    func detachOnboardingAndRouteToMain(animated: Bool)  {
        detachOnboardingAndRouteToMainCallCount += 1
        if let detachOnboardingAndRouteToMainHandler = detachOnboardingAndRouteToMainHandler {
            detachOnboardingAndRouteToMainHandler(animated)
        }
        
    }
}

class StatusViewControllableMock: StatusViewControllable {
    init() { }
    init(router: StatusRouting? = nil, uiviewController: UIViewController = UIViewController()) {
        self.router = router
        self.uiviewController = uiviewController
    }


    var routerSetCallCount = 0
    var router: StatusRouting? = nil { didSet { routerSetCallCount += 1 } }

    var uiviewControllerSetCallCount = 0
    var uiviewController: UIViewController = UIViewController() { didSet { uiviewControllerSetCallCount += 1 } }
}

class ViewControllableMock: ViewControllable {
    init() { }
    init(uiviewController: UIViewController = UIViewController()) {
        self.uiviewController = uiviewController
    }


    var uiviewControllerSetCallCount = 0
    var uiviewController: UIViewController = UIViewController() { didSet { uiviewControllerSetCallCount += 1 } }
}

class AboutListenerMock: AboutListener {
    init() { }


    var aboutRequestsDismissalCallCount = 0
    var aboutRequestsDismissalHandler: ((Bool) -> ())?
    func aboutRequestsDismissal(shouldHideViewController: Bool)  {
        aboutRequestsDismissalCallCount += 1
        if let aboutRequestsDismissalHandler = aboutRequestsDismissalHandler {
            aboutRequestsDismissalHandler(shouldHideViewController)
        }
        
    }
}

class ExposureControllingMock: ExposureControlling {
    init() { }


    var requestExposureNotificationPermissionCallCount = 0
    var requestExposureNotificationPermissionHandler: (() -> ())?
    func requestExposureNotificationPermission()  {
        requestExposureNotificationPermissionCallCount += 1
        if let requestExposureNotificationPermissionHandler = requestExposureNotificationPermissionHandler {
            requestExposureNotificationPermissionHandler()
        }
        
    }

    var requestPushNotificationPermissionCallCount = 0
    var requestPushNotificationPermissionHandler: (() -> ())?
    func requestPushNotificationPermission()  {
        requestPushNotificationPermissionCallCount += 1
        if let requestPushNotificationPermissionHandler = requestPushNotificationPermissionHandler {
            requestPushNotificationPermissionHandler()
        }
        
    }

    var confirmExposureNotificationCallCount = 0
    var confirmExposureNotificationHandler: (() -> ())?
    func confirmExposureNotification()  {
        confirmExposureNotificationCallCount += 1
        if let confirmExposureNotificationHandler = confirmExposureNotificationHandler {
            confirmExposureNotificationHandler()
        }
        
    }
}

class InfectedCodeEntryListenerMock: InfectedCodeEntryListener {
    init() { }


}

class InfectedCodeEntryViewControllableMock: InfectedCodeEntryViewControllable {
    init() { }
    init(uiviewController: UIViewController = UIViewController()) {
        self.uiviewController = uiviewController
    }


    var uiviewControllerSetCallCount = 0
    var uiviewController: UIViewController = UIViewController() { didSet { uiviewControllerSetCallCount += 1 } }
}

class InfectedInfoListenerMock: InfectedInfoListener {
    init() { }


}

class InfectedListenerMock: InfectedListener {
    init() { }


}

class InfectedResultListenerMock: InfectedResultListener {
    init() { }


}

class InfectedResultViewControllableMock: InfectedResultViewControllable {
    init() { }
    init(uiviewController: UIViewController = UIViewController()) {
        self.uiviewController = uiviewController
    }


    var uiviewControllerSetCallCount = 0
    var uiviewController: UIViewController = UIViewController() { didSet { uiviewControllerSetCallCount += 1 } }
}

class MainViewControllableMock: MainViewControllable {
    init() { }
    init(router: MainRouting? = nil, uiviewController: UIViewController = UIViewController()) {
        self.router = router
        self.uiviewController = uiviewController
    }


    var aboutRequestsDismissalCallCount = 0
    var aboutRequestsDismissalHandler: ((Bool) -> ())?
    func aboutRequestsDismissal(shouldHideViewController: Bool)  {
        aboutRequestsDismissalCallCount += 1
        if let aboutRequestsDismissalHandler = aboutRequestsDismissalHandler {
            aboutRequestsDismissalHandler(shouldHideViewController)
        }
        
    }

    var handleButtonActionCallCount = 0
    var handleButtonActionHandler: ((StatusViewButtonModel.Action) -> ())?
    func handleButtonAction(_ action: StatusViewButtonModel.Action)  {
        handleButtonActionCallCount += 1
        if let handleButtonActionHandler = handleButtonActionHandler {
            handleButtonActionHandler(action)
        }
        
    }

    var routerSetCallCount = 0
    var router: MainRouting? = nil { didSet { routerSetCallCount += 1 } }

    var moreInformationRequestsAboutCallCount = 0
    var moreInformationRequestsAboutHandler: (() -> ())?
    func moreInformationRequestsAbout()  {
        moreInformationRequestsAboutCallCount += 1
        if let moreInformationRequestsAboutHandler = moreInformationRequestsAboutHandler {
            moreInformationRequestsAboutHandler()
        }
        
    }

    var embedCallCount = 0
    var embedHandler: ((ViewControllable) -> ())?
    func embed(stackedViewController: ViewControllable)  {
        embedCallCount += 1
        if let embedHandler = embedHandler {
            embedHandler(stackedViewController)
        }
        
    }

    var moreInformationRequestsReceivedNotificationCallCount = 0
    var moreInformationRequestsReceivedNotificationHandler: (() -> ())?
    func moreInformationRequestsReceivedNotification()  {
        moreInformationRequestsReceivedNotificationCallCount += 1
        if let moreInformationRequestsReceivedNotificationHandler = moreInformationRequestsReceivedNotificationHandler {
            moreInformationRequestsReceivedNotificationHandler()
        }
        
    }

    var presentCallCount = 0
    var presentHandler: ((ViewControllable, Bool) -> ())?
    func present(viewController: ViewControllable, animated: Bool)  {
        presentCallCount += 1
        if let presentHandler = presentHandler {
            presentHandler(viewController, animated)
        }
        
    }

    var moreInformationRequestsInfectedCallCount = 0
    var moreInformationRequestsInfectedHandler: (() -> ())?
    func moreInformationRequestsInfected()  {
        moreInformationRequestsInfectedCallCount += 1
        if let moreInformationRequestsInfectedHandler = moreInformationRequestsInfectedHandler {
            moreInformationRequestsInfectedHandler()
        }
        
    }

    var uiviewControllerSetCallCount = 0
    var uiviewController: UIViewController = UIViewController() { didSet { uiviewControllerSetCallCount += 1 } }

    var moreInformationRequestsRequestTestCallCount = 0
    var moreInformationRequestsRequestTestHandler: (() -> ())?
    func moreInformationRequestsRequestTest()  {
        moreInformationRequestsRequestTestCallCount += 1
        if let moreInformationRequestsRequestTestHandler = moreInformationRequestsRequestTestHandler {
            moreInformationRequestsRequestTestHandler()
        }
        
    }

    var dismissCallCount = 0
    var dismissHandler: ((ViewControllable, Bool) -> ())?
    func dismiss(viewController: ViewControllable, animated: Bool)  {
        dismissCallCount += 1
        if let dismissHandler = dismissHandler {
            dismissHandler(viewController, animated)
        }
        
    }

    var moreInformationRequestsShareAppCallCount = 0
    var moreInformationRequestsShareAppHandler: (() -> ())?
    func moreInformationRequestsShareApp()  {
        moreInformationRequestsShareAppCallCount += 1
        if let moreInformationRequestsShareAppHandler = moreInformationRequestsShareAppHandler {
            moreInformationRequestsShareAppHandler()
        }
        
    }

    var moreInformationRequestsSettingsCallCount = 0
    var moreInformationRequestsSettingsHandler: (() -> ())?
    func moreInformationRequestsSettings()  {
        moreInformationRequestsSettingsCallCount += 1
        if let moreInformationRequestsSettingsHandler = moreInformationRequestsSettingsHandler {
            moreInformationRequestsSettingsHandler()
        }
        
    }
}

class MoreInformationViewControllableMock: MoreInformationViewControllable {
    init() { }
    init(uiviewController: UIViewController = UIViewController()) {
        self.uiviewController = uiviewController
    }


    var uiviewControllerSetCallCount = 0
    var uiviewController: UIViewController = UIViewController() { didSet { uiviewControllerSetCallCount += 1 } }
}

class OnboardingConsentBuildableMock: OnboardingConsentBuildable {
    init() { }


    var buildCallCount = 0
    var buildHandler: ((OnboardingConsentListener) -> (ViewControllable))?
    func build(withListener listener: OnboardingConsentListener) -> ViewControllable {
        buildCallCount += 1
        if let buildHandler = buildHandler {
            return buildHandler(listener)
        }
        return ViewControllableMock()
    }

    var buildWithListenerCallCount = 0
    var buildWithListenerHandler: ((OnboardingConsentListener, Int) -> (ViewControllable))?
    func build(withListener listener: OnboardingConsentListener, initialIndex: Int) -> ViewControllable {
        buildWithListenerCallCount += 1
        if let buildWithListenerHandler = buildWithListenerHandler {
            return buildWithListenerHandler(listener, initialIndex)
        }
        return ViewControllableMock()
    }
}

class OnboardingHelpListenerMock: OnboardingHelpListener {
    init() { }


    var helpRequestsFAQCallCount = 0
    var helpRequestsFAQHandler: (() -> ())?
    func helpRequestsFAQ()  {
        helpRequestsFAQCallCount += 1
        if let helpRequestsFAQHandler = helpRequestsFAQHandler {
            helpRequestsFAQHandler()
        }
        
    }

    var helpRequestsPermissionCallCount = 0
    var helpRequestsPermissionHandler: (() -> ())?
    func helpRequestsPermission()  {
        helpRequestsPermissionCallCount += 1
        if let helpRequestsPermissionHandler = helpRequestsPermissionHandler {
            helpRequestsPermissionHandler()
        }
        
    }

    var helpRequestsCloseCallCount = 0
    var helpRequestsCloseHandler: (() -> ())?
    func helpRequestsClose()  {
        helpRequestsCloseCallCount += 1
        if let helpRequestsCloseHandler = helpRequestsCloseHandler {
            helpRequestsCloseHandler()
        }
        
    }
}

class OnboardingHelpViewControllableMock: OnboardingHelpViewControllable {
    init() { }
    init(uiviewController: UIViewController = UIViewController()) {
        self.uiviewController = uiviewController
    }


    var uiviewControllerSetCallCount = 0
    var uiviewController: UIViewController = UIViewController() { didSet { uiviewControllerSetCallCount += 1 } }
}

class OnboardingRoutingMock: OnboardingRouting {
    init() { }
    init(viewControllable: ViewControllable = ViewControllableMock()) {
        self.viewControllable = viewControllable
    }


    var routeToStepsCallCount = 0
    var routeToStepsHandler: (() -> ())?
    func routeToSteps()  {
        routeToStepsCallCount += 1
        if let routeToStepsHandler = routeToStepsHandler {
            routeToStepsHandler()
        }
        
    }

    var viewControllableSetCallCount = 0
    var viewControllable: ViewControllable = ViewControllableMock() { didSet { viewControllableSetCallCount += 1 } }

    var routeToConsentCallCount = 0
    var routeToConsentHandler: ((Bool) -> ())?
    func routeToConsent(animated: Bool)  {
        routeToConsentCallCount += 1
        if let routeToConsentHandler = routeToConsentHandler {
            routeToConsentHandler(animated)
        }
        
    }

    var routeToConsentWithIndexCallCount = 0
    var routeToConsentWithIndexHandler: ((Int, Bool) -> ())?
    func routeToConsent(withIndex index: Int, animated: Bool)  {
        routeToConsentWithIndexCallCount += 1
        if let routeToConsentWithIndexHandler = routeToConsentWithIndexHandler {
            routeToConsentWithIndexHandler(index, animated)
        }
        
    }
}

class OnboardingStepBuildableMock: OnboardingStepBuildable {
    init() { }


    var buildCallCount = 0
    var buildHandler: ((OnboardingStepListener) -> (ViewControllable))?
    func build(withListener listener: OnboardingStepListener) -> ViewControllable {
        buildCallCount += 1
        if let buildHandler = buildHandler {
            return buildHandler(listener)
        }
        return ViewControllableMock()
    }

    var buildWithListenerCallCount = 0
    var buildWithListenerHandler: ((OnboardingStepListener, Int) -> (ViewControllable))?
    func build(withListener listener: OnboardingStepListener, initialIndex: Int) -> ViewControllable {
        buildWithListenerCallCount += 1
        if let buildWithListenerHandler = buildWithListenerHandler {
            return buildWithListenerHandler(listener, initialIndex)
        }
        return ViewControllableMock()
    }
}

class ReceivedNotificationListenerMock: ReceivedNotificationListener {
    init() { }


}

class ReceivedNotificationViewControllableMock: ReceivedNotificationViewControllable {
    init() { }
    init(uiviewController: UIViewController = UIViewController()) {
        self.uiviewController = uiviewController
    }


    var uiviewControllerSetCallCount = 0
    var uiviewController: UIViewController = UIViewController() { didSet { uiviewControllerSetCallCount += 1 } }
}

class RequestTestListenerMock: RequestTestListener {
    init() { }


}

class RoutingMock: Routing {
    init() { }
    init(viewControllable: ViewControllable = ViewControllableMock()) {
        self.viewControllable = viewControllable
    }


    var viewControllableSetCallCount = 0
    var viewControllable: ViewControllable = ViewControllableMock() { didSet { viewControllableSetCallCount += 1 } }
}

class SettingsListenerMock: SettingsListener {
    init() { }


}

class SettingsViewControllableMock: SettingsViewControllable {
    init() { }
    init(uiviewController: UIViewController = UIViewController()) {
        self.uiviewController = uiviewController
    }


    var uiviewControllerSetCallCount = 0
    var uiviewController: UIViewController = UIViewController() { didSet { uiviewControllerSetCallCount += 1 } }
}

class StatusListenerMock: StatusListener {
    init() { }


    var handleButtonActionCallCount = 0
    var handleButtonActionHandler: ((StatusViewButtonModel.Action) -> ())?
    func handleButtonAction(_ action: StatusViewButtonModel.Action)  {
        handleButtonActionCallCount += 1
        if let handleButtonActionHandler = handleButtonActionHandler {
            handleButtonActionHandler(action)
        }
        
    }
}

class OnboardingListenerMock: OnboardingListener {
    init() { }


    var didCompleteOnboardingCallCount = 0
    var didCompleteOnboardingHandler: (() -> ())?
    func didCompleteOnboarding()  {
        didCompleteOnboardingCallCount += 1
        if let didCompleteOnboardingHandler = didCompleteOnboardingHandler {
            didCompleteOnboardingHandler()
        }
        
    }
}

class OnboardingViewControllableMock: OnboardingViewControllable {
    init() { }
    init(router: OnboardingRouting? = nil, uiviewController: UIViewController = UIViewController()) {
        self.router = router
        self.uiviewController = uiviewController
    }


    var routerSetCallCount = 0
    var router: OnboardingRouting? = nil { didSet { routerSetCallCount += 1 } }

    var pushCallCount = 0
    var pushHandler: ((ViewControllable, Bool) -> ())?
    func push(viewController: ViewControllable, animated: Bool)  {
        pushCallCount += 1
        if let pushHandler = pushHandler {
            pushHandler(viewController, animated)
        }
        
    }

    var uiviewControllerSetCallCount = 0
    var uiviewController: UIViewController = UIViewController() { didSet { uiviewControllerSetCallCount += 1 } }

    var onboardingStepsDidCompleteCallCount = 0
    var onboardingStepsDidCompleteHandler: (() -> ())?
    func onboardingStepsDidComplete()  {
        onboardingStepsDidCompleteCallCount += 1
        if let onboardingStepsDidCompleteHandler = onboardingStepsDidCompleteHandler {
            onboardingStepsDidCompleteHandler()
        }
        
    }

    var consentCloseCallCount = 0
    var consentCloseHandler: (() -> ())?
    func consentClose()  {
        consentCloseCallCount += 1
        if let consentCloseHandler = consentCloseHandler {
            consentCloseHandler()
        }
        
    }

    var consentRequestCallCount = 0
    var consentRequestHandler: ((OnboardingConsentStepIndex) -> ())?
    func consentRequest(step: OnboardingConsentStepIndex)  {
        consentRequestCallCount += 1
        if let consentRequestHandler = consentRequestHandler {
            consentRequestHandler(step)
        }
        
    }
}

class StatusRoutingMock: StatusRouting {
    init() { }
    init(viewControllable: ViewControllable = ViewControllableMock()) {
        self.viewControllable = viewControllable
    }


    var viewControllableSetCallCount = 0
    var viewControllable: ViewControllable = ViewControllableMock() { didSet { viewControllableSetCallCount += 1 } }
}

class AboutViewControllableMock: AboutViewControllable {
    init() { }
    init(uiviewController: UIViewController = UIViewController()) {
        self.uiviewController = uiviewController
    }


    var uiviewControllerSetCallCount = 0
    var uiviewController: UIViewController = UIViewController() { didSet { uiviewControllerSetCallCount += 1 } }
}

class ShareSheetListenerMock: ShareSheetListener {
    init() { }


    var shareSheetDidCompleteCallCount = 0
    var shareSheetDidCompleteHandler: (() -> ())?
    func shareSheetDidComplete()  {
        shareSheetDidCompleteCallCount += 1
        if let shareSheetDidCompleteHandler = shareSheetDidCompleteHandler {
            shareSheetDidCompleteHandler()
        }
        
    }
}

class ShareSheetViewControllableMock: ShareSheetViewControllable {
    init() { }
    init(uiviewController: UIViewController = UIViewController()) {
        self.uiviewController = uiviewController
    }


    var uiviewControllerSetCallCount = 0
    var uiviewController: UIViewController = UIViewController() { didSet { uiviewControllerSetCallCount += 1 } }
}

class WebViewingMock: WebViewing {
    init() { }
    init(uiview: UIView = UIView(frame: .zero)) {
        self.uiview = uiview
    }


    var uiviewSetCallCount = 0
    var uiview: UIView = UIView(frame: .zero) { didSet { uiviewSetCallCount += 1 } }

    var loadCallCount = 0
    var loadHandler: ((URLRequest) -> ())?
    func load(request: URLRequest)  {
        loadCallCount += 1
        if let loadHandler = loadHandler {
            loadHandler(request)
        }
        
    }
}

class WebListenerMock: WebListener {
    init() { }


}

class WebBuildableMock: WebBuildable {
    init() { }


    var buildCallCount = 0
    var buildHandler: ((WebListener, URLRequest) -> (ViewControllable))?
    func build(withListener listener: WebListener, urlRequest: URLRequest) -> ViewControllable {
        buildCallCount += 1
        if let buildHandler = buildHandler {
            return buildHandler(listener, urlRequest)
        }
        return ViewControllableMock()
    }
}

class MoreInformationListenerMock: MoreInformationListener {
    init() { }


    var moreInformationRequestsAboutCallCount = 0
    var moreInformationRequestsAboutHandler: (() -> ())?
    func moreInformationRequestsAbout()  {
        moreInformationRequestsAboutCallCount += 1
        if let moreInformationRequestsAboutHandler = moreInformationRequestsAboutHandler {
            moreInformationRequestsAboutHandler()
        }
        
    }

    var moreInformationRequestsReceivedNotificationCallCount = 0
    var moreInformationRequestsReceivedNotificationHandler: (() -> ())?
    func moreInformationRequestsReceivedNotification()  {
        moreInformationRequestsReceivedNotificationCallCount += 1
        if let moreInformationRequestsReceivedNotificationHandler = moreInformationRequestsReceivedNotificationHandler {
            moreInformationRequestsReceivedNotificationHandler()
        }
        
    }

    var moreInformationRequestsInfectedCallCount = 0
    var moreInformationRequestsInfectedHandler: (() -> ())?
    func moreInformationRequestsInfected()  {
        moreInformationRequestsInfectedCallCount += 1
        if let moreInformationRequestsInfectedHandler = moreInformationRequestsInfectedHandler {
            moreInformationRequestsInfectedHandler()
        }
        
    }

    var moreInformationRequestsRequestTestCallCount = 0
    var moreInformationRequestsRequestTestHandler: (() -> ())?
    func moreInformationRequestsRequestTest()  {
        moreInformationRequestsRequestTestCallCount += 1
        if let moreInformationRequestsRequestTestHandler = moreInformationRequestsRequestTestHandler {
            moreInformationRequestsRequestTestHandler()
        }
        
    }

    var moreInformationRequestsShareAppCallCount = 0
    var moreInformationRequestsShareAppHandler: (() -> ())?
    func moreInformationRequestsShareApp()  {
        moreInformationRequestsShareAppCallCount += 1
        if let moreInformationRequestsShareAppHandler = moreInformationRequestsShareAppHandler {
            moreInformationRequestsShareAppHandler()
        }
        
    }

    var moreInformationRequestsSettingsCallCount = 0
    var moreInformationRequestsSettingsHandler: (() -> ())?
    func moreInformationRequestsSettings()  {
        moreInformationRequestsSettingsCallCount += 1
        if let moreInformationRequestsSettingsHandler = moreInformationRequestsSettingsHandler {
            moreInformationRequestsSettingsHandler()
        }
        
    }
}

class OnboardingBuildableMock: OnboardingBuildable {
    init() { }


    var buildCallCount = 0
    var buildHandler: ((OnboardingListener) -> (Routing))?
    func build(withListener listener: OnboardingListener) -> Routing {
        buildCallCount += 1
        if let buildHandler = buildHandler {
            return buildHandler(listener)
        }
        return RoutingMock()
    }
}

class ShareSheetBuildableMock: ShareSheetBuildable {
    init() { }


    var buildCallCount = 0
    var buildHandler: ((ShareSheetListener, [Any]) -> (ViewControllable))?
    func build(withListener listener: ShareSheetListener, items: [Any]) -> ViewControllable {
        buildCallCount += 1
        if let buildHandler = buildHandler {
            return buildHandler(listener, items)
        }
        return ViewControllableMock()
    }
}

class AboutBuildableMock: AboutBuildable {
    init() { }


    var buildCallCount = 0
    var buildHandler: ((AboutListener) -> (ViewControllable))?
    func build(withListener listener: AboutListener) -> ViewControllable {
        buildCallCount += 1
        if let buildHandler = buildHandler {
            return buildHandler(listener)
        }
        return ViewControllableMock()
    }
}

class StatusBuildableMock: StatusBuildable {
    init() { }


    var buildCallCount = 0
    var buildHandler: ((StatusListener) -> (StatusRouting))?
    func build(withListener listener: StatusListener) -> StatusRouting {
        buildCallCount += 1
        if let buildHandler = buildHandler {
            return buildHandler(listener)
        }
        return StatusRoutingMock()
    }
}

class WebViewControllableMock: WebViewControllable {
    init() { }
    init(uiviewController: UIViewController = UIViewController()) {
        self.uiviewController = uiviewController
    }


    var uiviewControllerSetCallCount = 0
    var uiviewController: UIViewController = UIViewController() { didSet { uiviewControllerSetCallCount += 1 } }
}

class MoreInformationTableControllingMock: MoreInformationTableControlling {
    init() { }
    init(listener: MoreInformationTableListener? = nil, delegate: UITableViewDelegate, dataSource: UITableViewDataSource) {
        self.listener = listener
        self._delegate = delegate
        self._dataSource = dataSource
    }


    var setCallCount = 0
    var setHandler: (([MoreInformationCell]) -> ())?
    func set(cells: [MoreInformationCell])  {
        setCallCount += 1
        if let setHandler = setHandler {
            setHandler(cells)
        }
        
    }

    var listenerSetCallCount = 0
    var listener: MoreInformationTableListener? = nil { didSet { listenerSetCallCount += 1 } }

    var delegateSetCallCount = 0
    private var _delegate: UITableViewDelegate!  { didSet { delegateSetCallCount += 1 } }
    var delegate: UITableViewDelegate {
        get { return _delegate }
        set { _delegate = newValue }
    }

    var dataSourceSetCallCount = 0
    private var _dataSource: UITableViewDataSource!  { didSet { dataSourceSetCallCount += 1 } }
    var dataSource: UITableViewDataSource {
        get { return _dataSource }
        set { _dataSource = newValue }
    }
}

class RootViewControllableMock: RootViewControllable {
    init() { }
    init(uiviewController: UIViewController = UIViewController(), router: RootRouting? = nil) {
        self.uiviewController = uiviewController
        self.router = router
    }


    var didCompleteOnboardingCallCount = 0
    var didCompleteOnboardingHandler: (() -> ())?
    func didCompleteOnboarding()  {
        didCompleteOnboardingCallCount += 1
        if let didCompleteOnboardingHandler = didCompleteOnboardingHandler {
            didCompleteOnboardingHandler()
        }
        
    }

    var uiviewControllerSetCallCount = 0
    var uiviewController: UIViewController = UIViewController() { didSet { uiviewControllerSetCallCount += 1 } }

    var routerSetCallCount = 0
    var router: RootRouting? = nil { didSet { routerSetCallCount += 1 } }

    var presentCallCount = 0
    var presentHandler: ((ViewControllable, Bool, (() -> ())?) -> ())?
    func present(viewController: ViewControllable, animated: Bool, completion: (() -> ())?)  {
        presentCallCount += 1
        if let presentHandler = presentHandler {
            presentHandler(viewController, animated, completion)
        }
        
    }

    var dismissCallCount = 0
    var dismissHandler: ((ViewControllable, Bool, (() -> ())?) -> ())?
    func dismiss(viewController: ViewControllable, animated: Bool, completion: (() -> ())?)  {
        dismissCallCount += 1
        if let dismissHandler = dismissHandler {
            dismissHandler(viewController, animated, completion)
        }
        
    }

    var embedCallCount = 0
    var embedHandler: ((ViewControllable) -> ())?
    func embed(viewController: ViewControllable)  {
        embedCallCount += 1
        if let embedHandler = embedHandler {
            embedHandler(viewController)
        }
        
    }
}

class OnboardingHelpBuildableMock: OnboardingHelpBuildable {
    init() { }


    var buildCallCount = 0
    var buildHandler: ((OnboardingHelpListener) -> (ViewControllable))?
    func build(withListener listener: OnboardingHelpListener) -> ViewControllable {
        buildCallCount += 1
        if let buildHandler = buildHandler {
            return buildHandler(listener)
        }
        return ViewControllableMock()
    }
}

class InfectedBuildableMock: InfectedBuildable {
    init() { }


    var buildCallCount = 0
    var buildHandler: ((InfectedListener) -> (Routing))?
    func build(withListener listener: InfectedListener) -> Routing {
        buildCallCount += 1
        if let buildHandler = buildHandler {
            return buildHandler(listener)
        }
        return RoutingMock()
    }
}

class SettingsBuildableMock: SettingsBuildable {
    init() { }


    var buildCallCount = 0
    var buildHandler: ((SettingsListener) -> (ViewControllable))?
    func build(withListener listener: SettingsListener) -> ViewControllable {
        buildCallCount += 1
        if let buildHandler = buildHandler {
            return buildHandler(listener)
        }
        return ViewControllableMock()
    }
}

class RequestTestBuildableMock: RequestTestBuildable {
    init() { }


    var buildCallCount = 0
    var buildHandler: ((RequestTestListener) -> (Routing))?
    func build(withListener listener: RequestTestListener) -> Routing {
        buildCallCount += 1
        if let buildHandler = buildHandler {
            return buildHandler(listener)
        }
        return RoutingMock()
    }
}

class InfectedInfoBuildableMock: InfectedInfoBuildable {
    init() { }


    var buildCallCount = 0
    var buildHandler: ((InfectedInfoListener) -> (Routing))?
    func build(withListener listener: InfectedInfoListener) -> Routing {
        buildCallCount += 1
        if let buildHandler = buildHandler {
            return buildHandler(listener)
        }
        return RoutingMock()
    }
}

class InfectedResultBuildableMock: InfectedResultBuildable {
    init() { }


    var buildCallCount = 0
    var buildHandler: ((InfectedResultListener) -> (ViewControllable))?
    func build(withListener listener: InfectedResultListener) -> ViewControllable {
        buildCallCount += 1
        if let buildHandler = buildHandler {
            return buildHandler(listener)
        }
        return ViewControllableMock()
    }
}

class InfectedCodeEntryBuildableMock: InfectedCodeEntryBuildable {
    init() { }


    var buildCallCount = 0
    var buildHandler: ((InfectedCodeEntryListener) -> (ViewControllable))?
    func build(withListener listener: InfectedCodeEntryListener) -> ViewControllable {
        buildCallCount += 1
        if let buildHandler = buildHandler {
            return buildHandler(listener)
        }
        return ViewControllableMock()
    }
}

class ReceivedNotificationBuildableMock: ReceivedNotificationBuildable {
    init() { }


    var buildCallCount = 0
    var buildHandler: ((ReceivedNotificationListener) -> (ViewControllable))?
    func build(withListener listener: ReceivedNotificationListener) -> ViewControllable {
        buildCallCount += 1
        if let buildHandler = buildHandler {
            return buildHandler(listener)
        }
        return ViewControllableMock()
    }
}

class ExposureControllerBuildableMock: ExposureControllerBuildable {
    init() { }


    var buildCallCount = 0
    var buildHandler: (() -> (ExposureControlling))?
    func build() -> ExposureControlling {
        buildCallCount += 1
        if let buildHandler = buildHandler {
            return buildHandler()
        }
        return ExposureControllingMock()
    }
}

class ExposureStateStreamingMock: ExposureStateStreaming {
    init() { }
    init(exposureStatus: AnyPublisher<ExposureState, Never>) {
        self._exposureStatus = exposureStatus
    }


    var exposureStatusSetCallCount = 0
    private var _exposureStatus: AnyPublisher<ExposureState, Never>!  { didSet { exposureStatusSetCallCount += 1 } }
    var exposureStatus: AnyPublisher<ExposureState, Never> {
        get { return _exposureStatus }
        set { _exposureStatus = newValue }
    }
}

class ExposureManagingMock: ExposureManaging {
    init() { }


    var activateCallCount = 0
    var activateHandler: ((@escaping (ExposureManagerAuthorisationStatus) -> Void) -> ())?
    func activate(completion: @escaping (ExposureManagerAuthorisationStatus) -> Void)  {
        activateCallCount += 1
        if let activateHandler = activateHandler {
            activateHandler(completion)
        }
        
    }

    var detectExposuresCallCount = 0
    var detectExposuresHandler: (([URL], @escaping (Result<ExposureDetectionSummary?, ExposureManagerError>) -> Void) -> ())?
    func detectExposures(diagnosisKeyURLs: [URL], completion: @escaping (Result<ExposureDetectionSummary?, ExposureManagerError>) -> Void)  {
        detectExposuresCallCount += 1
        if let detectExposuresHandler = detectExposuresHandler {
            detectExposuresHandler(diagnosisKeyURLs, completion)
        }
        
    }

    var getDiagnonisKeysCallCount = 0
    var getDiagnonisKeysHandler: ((@escaping (Result<[DiagnosisKey], ExposureManagerError>) -> Void) -> ())?
    func getDiagnonisKeys(completion: @escaping (Result<[DiagnosisKey], ExposureManagerError>) -> Void)  {
        getDiagnonisKeysCallCount += 1
        if let getDiagnonisKeysHandler = getDiagnonisKeysHandler {
            getDiagnonisKeysHandler(completion)
        }
        
    }

    var setExposureNotificationEnabledCallCount = 0
    var setExposureNotificationEnabledHandler: ((Bool, @escaping (Result<(), ExposureManagerError>) -> Void) -> ())?
    func setExposureNotificationEnabled(_ enabled: Bool, completion: @escaping (Result<(), ExposureManagerError>) -> Void)  {
        setExposureNotificationEnabledCallCount += 1
        if let setExposureNotificationEnabledHandler = setExposureNotificationEnabledHandler {
            setExposureNotificationEnabledHandler(enabled, completion)
        }
        
    }

    var isExposureNotificationEnabledCallCount = 0
    var isExposureNotificationEnabledHandler: (() -> (Bool))?
    func isExposureNotificationEnabled() -> Bool {
        isExposureNotificationEnabledCallCount += 1
        if let isExposureNotificationEnabledHandler = isExposureNotificationEnabledHandler {
            return isExposureNotificationEnabledHandler()
        }
        return false
    }

    var getExposureNotificationAuthorisationStatusCallCount = 0
    var getExposureNotificationAuthorisationStatusHandler: (() -> (ExposureManagerAuthorisationStatus))?
    func getExposureNotificationAuthorisationStatus() -> ExposureManagerAuthorisationStatus {
        getExposureNotificationAuthorisationStatusCallCount += 1
        if let getExposureNotificationAuthorisationStatusHandler = getExposureNotificationAuthorisationStatusHandler {
            return getExposureNotificationAuthorisationStatusHandler()
        }
        fatalError("getExposureNotificationAuthorisationStatusHandler returns can't have a default value thus its handler must be set")
    }
}

class OnboardingStepListenerMock: OnboardingStepListener {
    init() { }


    var onboardingStepsDidCompleteCallCount = 0
    var onboardingStepsDidCompleteHandler: (() -> ())?
    func onboardingStepsDidComplete()  {
        onboardingStepsDidCompleteCallCount += 1
        if let onboardingStepsDidCompleteHandler = onboardingStepsDidCompleteHandler {
            onboardingStepsDidCompleteHandler()
        }
        
    }
}

class OnboardingConsentListenerMock: OnboardingConsentListener {
    init() { }


    var consentCloseCallCount = 0
    var consentCloseHandler: (() -> ())?
    func consentClose()  {
        consentCloseCallCount += 1
        if let consentCloseHandler = consentCloseHandler {
            consentCloseHandler()
        }
        
    }

    var consentRequestCallCount = 0
    var consentRequestHandler: ((OnboardingConsentStepIndex) -> ())?
    func consentRequest(step: OnboardingConsentStepIndex)  {
        consentRequestCallCount += 1
        if let consentRequestHandler = consentRequestHandler {
            consentRequestHandler(step)
        }
        
    }
}

class MoreInformationBuildableMock: MoreInformationBuildable {
    init() { }


    var buildCallCount = 0
    var buildHandler: ((MoreInformationListener) -> (MoreInformationViewControllable))?
    func build(withListener listener: MoreInformationListener) -> MoreInformationViewControllable {
        buildCallCount += 1
        if let buildHandler = buildHandler {
            return buildHandler(listener)
        }
        return MoreInformationViewControllableMock()
    }
}

class RootBuildableMock: RootBuildable {
    init() { }


    var buildCallCount = 0
    var buildHandler: (() -> (AppEntryPoint))?
    func build() -> AppEntryPoint {
        buildCallCount += 1
        if let buildHandler = buildHandler {
            return buildHandler()
        }
        return AppEntryPointMock()
    }
}

class ExposureManagerBuildableMock: ExposureManagerBuildable {
    init() { }


    var buildCallCount = 0
    var buildHandler: (() -> (ExposureManaging?))?
    func build() -> ExposureManaging? {
        buildCallCount += 1
        if let buildHandler = buildHandler {
            return buildHandler()
        }
        return nil
    }
}

